#!/home/jack/Desktop/FlaskAppArchitect_Flask_App_Creator/env/bin/python3
from flask import Flask, request, render_template, redirect, url_for, flash
import os
import subprocess
import uuid
import shutil
from werkzeug.utils import secure_filename
import glob
import logging
from logging.handlers import RotatingFileHandler
app = Flask(__name__)
app.secret_key = os.urandom(24)
# Create a logger object
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Create a formatter for the log messages
formatter = logging.Formatter(
    '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]')

# Create a file handler to write log messages to a file
file_handler = RotatingFileHandler(
    'Logs/zoom.log', maxBytes=10000, backupCount=1)
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)

# Add the file handler to the logger
logger.addHandler(file_handler)
# Define a directory to store uploaded images
UPLOAD_FOLDER = 'static/temp_uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Allowed image extensions
ALLOWED_EXTENSIONS = {'jpg', 'jpeg', 'png', 'gif'}
@app.route('/hello_world')
def hello_world():
    TExt = "TEXT TEST 6789"
    logger.debug('This is a debug message: %s', TExt)

    TEXT = "TEXT TEST abcd"
    logger.debug('This is a debug message: %s', TEXT)

    return "Hello, World!"
# Function to check if a filename has an allowed extension
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def getimages():
    # image_dir =random.choice(glob.glob("/home/jack/Desktop/StoryMaker/static/images/*"))
    image_dir = glob.glob("/home/jack/Desktop/StoryMaker/static/images/*")
    # images = glob.glob(image_dir)
    image_dir = sorted(image_dir)
    return image_dir


def static_image_directories():
    image_directories = getimages()
    return image_directories
@app.route('/', methods=['POST', 'GET'])
def upload_form():
    # List available image directories
    image_directories = static_image_directories()
    video = 'assets/framed_final_output.mp4'
    video2 = 'assets/final_output.mp4'
    return render_template('dir_to_video.html', image_directories=image_directories, video=video, video2=video2)


# Define a route to handle the image upload and video generation
@app.route('/image_to_video', methods=['POST', 'GET'])
def image_to_video():
    # Check if the post request has the file part
    if 'files[]' not in request.files:
        flash('No file part')
        return redirect(request.url)

    files = request.files.getlist('files[]')
    image_paths = []

    # Save the uploaded images
    for i, file in enumerate(files):
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            image_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(image_path)
            image_paths.append(image_path)
        logger.debug('This is image_path: %s', image_path)
    if not image_paths:
        flash('No valid image files uploaded')
        return redirect(request.url)

    # Specify the output video file path
    output_video = 'static/output/yoda_video.mp4'

    # Frame rate for the output video (adjust as needed)
    frame_rate = 24

    # Zoom and pan filter settings
    zoom_factor = 1.1  # Adjust the zoom factor as needed
    zoom_duration = 5  # Duration of the zoom effect (seconds)

    # Initialize the FFmpeg command
    ffmpeg_cmd = [
        'ffmpeg',
        '-framerate', str(frame_rate),
    ]

    # Iterate through the uploaded images and apply zoom and pan effects
    for image_path in image_paths:
        # Define zoom and pan filter
        zoom_filter = f'zoompan=z=\'min(zoom+0.0015,{zoom_factor})\':d={zoom_duration}:s=512x768'

        ffmpeg_cmd += [
            '-i', image_path,
            '-vf', zoom_filter,
        ]

    # Output video settings
    ffmpeg_cmd += [
        '-c:v', 'libx264',
        '-pix_fmt', 'yuv420p',
        '-y',  # Overwrite output file if it exists
        output_video,
    ]

    # Run the FFmpeg command
    subprocess.run(ffmpeg_cmd)

    # Generate a unique mp4 filename using uuid
    mp4_filename = str(uuid.uuid4()) + '.mp4'
    output_path = os.path.join('static', 'output', mp4_filename)
    shutil.copy(output_video, output_path)

    return redirect(url_for('download_video', filename=mp4_filename))

# Define a route to download the generated video
@app.route('/download_video/<filename>')
def download_video(filename):
    return redirect(url_for('static', filename=f'output/{filename}'))

if __name__ == '__main__':
     app.run(debug=True)
